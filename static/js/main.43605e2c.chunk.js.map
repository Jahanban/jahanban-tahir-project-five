{"version":3,"sources":["Images/cart.png","firebase.js","Addtocart.js","Carticon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Button","className","onClick","this","props","handleClick","Component","Icon","src","require","alt","App","setState","count","state","desks","database","ref","on","response","newState","data","val","key","push","href","aria-label","id","map","desk","image","title","description","price","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,2JCc3CC,IAASC,cATM,CACXC,OAAQ,0CACRC,WAAY,0CACZC,YAAa,iDACbC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECEeS,E,uKAXP,OACI,6BACI,4BAAQC,UAAU,WAAWC,QAASC,KAAKC,MAAMC,aAAjD,oB,GALKC,aCUNC,E,uKARP,OACI,6BACI,yBAAKN,UAAU,YAAYO,IAAKC,EAAQ,IAAsBC,IAAM,uD,GALjEJ,aCkFJK,G,wDAxEb,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IAsBRC,YAAc,WACZ,EAAKO,SAAS,CACZC,MAAO,EAAKC,MAAMD,MAAQ,KAvB5B,EAAKC,MAAQ,CACXC,MAAO,GACPF,MAAO,GAJQ,E,gEAQE,IAAD,OACJtB,EAASyB,WAAWC,MAC5BC,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAW,GACXC,EAAOF,EAASG,MACtB,IAAK,IAAIC,KAAOF,EACdD,EAASI,KAAKH,EAAKE,IAErB,EAAKX,SAAS,CACZG,MAAOK,S,+BAaH,IAAD,OACP,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aACb,2CACA,uBAAGwB,KAAK,QAAQxB,UAAU,MAAMyB,aAAW,kCAA3C,qBAIJ,iCACE,yBAAKC,GAAG,OAAO1B,UAAU,aACvB,kBAAC,EAAD,MACA,2BAAIE,KAAKW,MAAMD,SAInB,yBAAKc,GAAG,OAAO1B,UAAU,WACvB,4BACGE,KAAKW,MAAMC,MAAMa,KAAI,SAACC,GACrB,OACE,wBAAI5B,UAAU,YAAYsB,IAAKM,EAAKF,IAClC,yBAAKnB,IAAKqB,EAAKC,MAAOpB,IAAK,WAC3B,2BAAImB,EAAKE,OACT,2BAAIF,EAAKG,aACT,+BAAKH,EAAKI,OACV,kBAAC,EAAD,CAAQ5B,YAAa,EAAKA,YAAaQ,MAAO,EAAKC,MAAMD,QACzD,uBAAGZ,UAAU,UAAUwB,KAAK,QAAQC,aAAW,kEAA/C,oBAOV,gCACE,oE,GAlEQpB,cCDE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43605e2c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cart.cc60b145.png\";","// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst config = {\n    apiKey: \"AIzaSyAuH7tVC9pXhx3Qgs-Y_uSr753OTXeUdyI\",\n    authDomain: \"juno-project-five-730f7.firebaseapp.com\",\n    databaseURL: \"https://juno-project-five-730f7.firebaseio.com\",\n    projectId: \"juno-project-five-730f7\",\n    storageBucket: \"juno-project-five-730f7.appspot.com\",\n    messagingSenderId: \"502626620430\",\n    appId: \"1:502626620430:web:7d11e78e3f38fb5b8b185f\"\n};\nfirebase.initializeApp(config);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;\n\n\n\n\n\n\n\n\n","// Add to cart component - button\n\nimport React, { Component } from 'react';\n\n\nclass Button extends Component {\n\n    render() {\n        return (\n            <div>\n                <button className=\"add-cart\" onClick={this.props.handleClick}>Add to cart</button>\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default Button;","// cart icon component\n\nimport React, { Component } from 'react';\n\nclass Icon extends Component {\n\n    render() {\n        return (\n            <div>\n                <img className=\"cart-icon\" src={require(\"./Images/cart.png\")} alt={(\"Icons showcaisng items added to the cart are:\")} />\n            </div>\n        )\n    }\n}\n\nexport default Icon;","import React, { Component } from 'react';\n\n// Firebase component\nimport firebase from './firebase';\n\n// Component for 'Add to cart' and 'Cart Icon'\nimport Button from './Addtocart';\nimport Icon from './Carticon';\n\n// CSS for the 'App' component\nimport './App.css';\n\n//Set initial state, mounting and commit phase\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      desks: [],\n      count: 0,\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      const newState = [];\n      const data = response.val();\n      for (let key in data) {\n        newState.push(data[key]);\n      }\n      this.setState({\n        desks: newState,\n      });\n    });\n  }\n\n  // count update function\n  handleClick = () => {\n    this.setState({\n      count: this.state.count + 1,\n    })\n  }\n\n  // Data to be displayed on page including header, cart icon and counter, .map to iterate over the Desks array and footer.\n  render() {\n    return (\n      <div className='App'>\n        <header className=\"app-header\">\n          <div className=\"app-title\">\n            <h1>Dream Desks</h1>\n            <a href=\"#main\" className=\"btn\" aria-label=\"Click to display items catalog\">Display Catalog</a>\n          </div>\n        </header>\n\n        <section>\n          <div id=\"cart\" className=\"cart-disp\">\n            <Icon />\n            <p>{this.state.count}</p>\n          </div>\n        </section>\n\n        <div id=\"main\" className=\"wrapper\">\n          <ul>\n            {this.state.desks.map((desk) => {\n              return (\n                <li className=\"desk-data\" key={desk.id}>\n                  <img src={desk.image} alt={'A desk'} />\n                  <p>{desk.title}</p>\n                  <p>{desk.description}</p>\n                  <p>${desk.price}</p>\n                  <Button handleClick={this.handleClick} count={this.state.count} />\n                  <a className=\"go-cart\" href=\"#cart\" aria-label=\"Click on link to scroll up to cart and view the count of items\">Go to cart</a>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <footer>\n          <p>Dream Desk Store Front Â©2020</p>\n        </footer>\n\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}